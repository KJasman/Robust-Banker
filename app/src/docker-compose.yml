# Some issues lead to needing to run this: 
# export $(grep -v '^#' authentication/.env | xargs)
# docker compose -f <absolute-path-to-docker-compose> up -d --build

# We are aware of the security implications of environment variable
# instantiation in a docker compose file, however as this is an 
# academic project, this is more convenient.

services:
  # -------------------------------------------------------
  # 1) API Gateway
  # -------------------------------------------------------
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - JWT_SECRET=eyJhbGciOiJIUzI1Ni...
      - RATE_LIMIT=100
      - RATE_LIMIT_WINDOW=10000
    depends_on:
      - redis
      - auth-service
    networks:
      - trading-network
    restart: unless-stopped

  # -------------------------------------------------------
  # 2) Redis
  # -------------------------------------------------------
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # -------------------------------------------------------
  # 3) Authentication service + DB
  # -------------------------------------------------------
  auth-service:
    build:
      context: ./authentication
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - JWT_SECRET=eyJhbGciOiJIUzI1Ni...
      - DB_HOST=auth-db
      - DB_PORT=5432
      - DB_USER=SENG468
      - DB_PASSWORD=SENG468-Student
      - DB_NAME=user-login
      - DB_SSLMODE=disable
    depends_on:
      auth-db:
        condition: service_healthy
    networks:
      - trading-network
    restart: unless-stopped

  auth-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: SENG468
      POSTGRES_PASSWORD: SENG468-Student
      POSTGRES_DB: user-login
    ports:
      - "5432:5432"
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U SENG468 -d user-login"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # -------------------------------------------------------
  # 4) Order-History + TimescaleDB
  # -------------------------------------------------------
  order-history-service:
    build:
      context: ./order-history
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - PORT=8082
      - TIMESCALE_HOST=timescale-db
      - TIMESCALE_PORT=5432  
      - DB_USER=history_user
      - DB_PASSWORD=history_password
      - TIMESCALE_DB=order_history
      - JWT_SECRET=eyJhbGciOiJIUzI1Ni...
    depends_on:
      timescale-db:
        condition: service_healthy
    networks:
      - trading-network
    restart: unless-stopped

  timescale-db:
    image: timescale/timescaledb:latest-pg15
    environment:
      POSTGRES_USER: history_user
      POSTGRES_PASSWORD: history_password
      POSTGRES_DB: order_history
    ports:
      - "5433:5432"  # Map host 5433 -> container 5432; otherwise conflicts
    volumes:
      - timescale-db-data:/var/lib/postgresql/data
      - ./order-history/migrations:/docker-entrypoint-initdb.d
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U history_user -d order_history"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # -------------------------------------------------------
  # 5) Order-Service (Cassandra + Redis)
  # -------------------------------------------------------
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
      - JWT_SECRET=eyJhbGciOiJIUzI1Ni...
      - RATE_LIMIT=100
      - RATE_LIMIT_WINDOW=10000

      # Cassandra
      - CASSANDRA_DB_HOST=cassandra-db
      - CASSANDRA_DB_PORT=9042
      - CASSANDRA_STOCKS_KEYSPACE=stocks_keyspace
      - CASSANDRA_ORDERS_KEYSPACE=orders_keyspace
      - DB_USER=SENG468
      - DB_PASSWORD=SENG468-Student
      - DB_NAME=user-login
      - DB_SSLMODE=disable

      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_ORDER_CHANNEL=new-orders
    depends_on:
      cassandra-db:
        condition: service_healthy
      init-cassandra:
        condition: service_completed_successfully
      redis:
        condition: service_started
    networks:
      - trading-network
    restart: unless-stopped

  cassandra-db:
    image: cassandra:latest
    environment:
      - CASSANDRA_AUTH_ENABLED=true
      - CASSANDRA_CLUSTER_NAME=trading-cluster
      - DB_USER=SENG468
      - DB_PASSWORD=SENG468-Student
      - MAX_HEAP_SIZE=1G  
      - HEAP_NEWSIZE=256M  
      - CASSANDRA_BROADCAST_ADDRESS=cassandra-db
      - CASSANDRA_SEEDS=cassandra-db
      - CASSANDRA_ENDPOINT_SNITCH=SimpleSnitch
      - CASSANDRA_DC=datacenter1
    ports:
      - "9042:9042"
    volumes:
      - cassandra-db-data:/var/lib/cassandra
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "cqlsh", "-u", "SENG468", "-p", "SENG468-Student", "-e", "DESCRIBE KEYSPACES"]
      interval: 20s
      timeout: 10s
      retries: 10
    restart: unless-stopped

  init-cassandra:
    image: cassandra:latest
    depends_on:
      cassandra-db:
        condition: service_healthy
    volumes:
      - ./order-service/migrations/schema.cql:/schema.cql
    entrypoint: [
      "bash", "-c",
      "sleep 5 && cqlsh -u SENG468 -p SENG468-Student cassandra-db -f /schema.cql"
    ]
    networks:
      - trading-network
    restart: "no"
  # -------------------------------------------------------
  # 6) Wallet-Service (Cockroach)
  # -------------------------------------------------------
  wallet-service:
    build:
      context: ./wallet-portfolio
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - PORT=8083
      - COCKROACH_DB_HOST=cockroach-db
      - DB_USER=root
      - DB_PASSWORD=SENG468-
    depends_on:
      cockroach-db:
        condition: service_healthy
      init-cockroach:
        condition: service_completed_successfully
    networks:
      - trading-network
    restart: unless-stopped

  cockroach-db:
    image: cockroachdb/cockroach:latest
    command: start-single-node --insecure
    ports:
      - "26257:26257"
    volumes:
      - cockroach-db-data:/cockroach/cockroach-data
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s localhost:8080/health?ready=1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  init-cockroach:
    image: cockroachdb/cockroach:latest
    depends_on:
      cockroach-db:
        condition: service_healthy
    volumes:
      - ./wallet-portfolio/migrations:/migrations
    entrypoint: ["bash","-c","sleep 5 && cockroach sql --insecure --host=cockroach-db:26257 -f /migrations/portfolio_table.sql"]
    networks:
      - trading-network
    restart: "no"

  # -------------------------------------------------------
  # 7) Matching-Service 
  # -------------------------------------------------------
  matching-service:
    build:
      context: ./matching-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - PORT=8084
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_ORDER_CHANNEL=new-orders
      - WALLET_PORTFOLIO_URL=http://wallet-service:8083
      - ORDER_HISTORY_URL=http://order-history-service:8082
    depends_on:
      - redis
      - wallet-service
      - order-history-service
    networks:
      - trading-network
    restart: unless-stopped

# -------------------------------------------------------------------
# Networks + Volumes
# -------------------------------------------------------------------
networks:
  trading-network:
    driver: bridge

volumes:
  auth-db-data:
    name: auth-db-data
  cassandra-db-data:
    name: cassandra-db-data
  timescale-db-data:
    name: timescale-db-data  
  cockroach-db-data:
    name: cockroach-db-data